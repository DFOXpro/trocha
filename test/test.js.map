{
  "version": 3,
  "file": "test.js",
  "sourceRoot": "",
  "sources": [
    "test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "testFramework = (options) ->\n\tresults =\n\t\trunningDescribe: null\n\t\tdescribesToTest: []\n\t\tasserts: 0\n\t\tbadAsserts: 0\n\t\ttotalBaseDescribes: 0\n\t\ttotal: 0\n\t\tbad: 0\n\n\tr = {}\n\tr.it = (doString, itFun) ->\n\t\tconsole.log doString\n\t\ttry\n\t\t\titFun()\n\t\tcatch e\n\t\t\tconsole.error \"BROKEN EXAMPLE\" + doString\n\t\t\tconsole.error \"Exception caught\", e\n\t\t\n\tr.describe = (title, describeFun) ->\n\t\tsuccessPromp = ->\n\t\t\tconsole.log \"%c#{desc.title} test success.\", \"color: white; font-style: italic; background-color: green;padding: 1em\"\n\t\tfailWarning = ->\n\t\t\tdesc.fail = true\n\t\t\tresults.bad++\n\t\t\tconsole.log \"%c#{desc.title} test failed.\", \"color: white; font-style: italic; background-color: red;padding: 1em\"\n\n\t\tdesc =\n\t\t\ttitle: ''\n\t\t\tfun: describeFun\n\t\t\tchildsDescribes: []\n\t\t\ttotalChilds: 0\n\t\t\tfailWarning: failWarning\n\t\t\tsuccessPromp: successPromp\n\t\tif results.runningDescribe\n\t\t\tdesc.parent = results.runningDescribe\n\t\t\tdesc.position = ++desc.parent.totalChilds\n\t\telse\n\t\t\tdesc.parent = totalChilds: results.totalBaseDescribes\n\t\tresults.total++\n\n\t\t_descNumeral = (_desc) ->\n\t\t\tdesc.title = \"#{_desc.position}.#{desc.title}\" if _desc.position\n\t\t\tif _desc.parent\n\t\t\t\t_descNumeral _desc.parent\n\t\t\telse\n\t\t\t\tdesc.title += \" #{title}\"\n\t\t_descNumeral desc\n\n\t\tif desc.parent.childsDescribes\n\t\t\tdesc.parent.childsDescribes.push desc\n\t\telse\n\t\t\tresults.describesToTest.push desc\n\n\tr.assertFunctionError = (faultyFunction, params, expectedException) ->\n\t\ttry\n\t\t\tfaultyFunction params\n\t\t\tresults.badAsserts++\n\t\t\tresults.runningDescribe.fail = true\n\t\t\tconsole.assert false, {expectedException: expectedException, msg: 'Expected error in function buts runs ok'}\n\t\tcatch e\n\t\t\t# console.log 'Spected error was an error', e\n\n\tr.assert = (result, expected) ->\n\t\tassertFail = false\n\t\tresults.asserts++\n\t\terrorMessage = ''\n\t\tif 'object' == typeof expected\n\t\t\tif 'object' != typeof result\n\t\t\t\tassertFail = true\n\t\t\t\terrorMessage = \"Expected any object\"\n\t\telse if 'function' == typeof expected\n\t\t\tif 'function' != typeof result\n\t\t\t\tassertFail = true\n\t\t\t\terrorMessage = \"Expected any function\"\n\t\telse if result != expected\n\t\t\tassertFail = true\n\t\t\terrorMessage = \"Expected #{expected}, but was: #{result}\"\n\t\tif assertFail\n\t\t\tresults.badAsserts++\n\t\t\tresults.runningDescribe.fail = true\n\t\t\tconsole.assert false, {expected: expected, result: result, msg: errorMessage}\n\n\tr.run = ->\n\t\t_runDescribes = (describes) ->\n\t\t\twhile describes.length > 0\n\t\t\t\t_currentDescribe = results.runningDescribe = describes.shift()\n\t\t\t\tconsole.info \"Testing \" + results.runningDescribe.title\n\t\t\t\ttry\n\t\t\t\t\t_currentDescribe.fun()\n\t\t\t\t\t_runDescribes _currentDescribe.childsDescribes\n\t\t\t\tcatch e\n\t\t\t\t\t_currentDescribe.fail = true\n\t\t\t\t\tconsole.error \"Exception caught\", e\n\t\t\t\tif _currentDescribe.fail\n\t\t\t\t\t_currentDescribe.failWarning()\n\t\t\t\telse\n\t\t\t\t\t_currentDescribe.successPromp()\n\t\t_runDescribes results.describesToTest\n\n\t\tconsole.log(\n\t\t\t\"Of (#{results.asserts - results.badAsserts}/#{results.asserts}) assert\",\n\t\t\t\"(#{(results.total - results.bad)}/#{results.total}) tests, #{results.bad} failed\"\n\t\t)\n\n\tif options && options.global\n\t\tObject.keys(r).forEach (attr) ->\n\t\t\twindow[attr] = r[attr]\n\n\tr\n\ntest = testFramework global: true\n\n# Note this function does not clone functions\n_clone = (object) ->\n\tJSON.parse JSON.stringify object\nconstants_test = ->\n\tdescribe 'Constants returns', ->\n\t\tit 'should be no editable', ->\n\t\t\ttrocha.ROUTE = \"Atack!\"\n\t\t\ttrocha.OPTIONS = \"Atack!\"\n\t\t\ttrocha.$RESOURCE = \"Atack!\"\n\t\t\tassert trocha.ROUTE, \"ROUTE\"\n\t\t\tassert trocha.OPTIONS, \"OPTIONS\"\n\t\t\tassert trocha.$RESOURCE, {}\n\t\tit 'should return HTTP request methods types', ->\n\t\t\tassert trocha.OPTIONS, \"OPTIONS\"\n\t\t\tassert trocha.GET, \"GET\"\n\t\t\tassert trocha.HEAD, \"HEAD\"\n\t\t\tassert trocha.POST, \"POST\"\n\t\t\tassert trocha.PUT, \"PUT\"\n\t\t\tassert trocha.PATCH, \"PATCH\"\n\t\t\tassert trocha.DELETE, \"DELETE\"\n\t\t\tassert trocha.TRACE, \"TRACE\"\n\t\t\tassert trocha.CONNECT, \"CONNECT\"\n\t\tit 'should return default resource tree', ->\n\t\t\tassert trocha.$RESOURCE, {\n\t\t\t\t$id: 'id'\n\t\t\t\tshow:\n\t\t\t\t\t$hide: true\n\t\t\t\tedit: {}\n\t\t\t\tnew:\n\t\t\t\t\t$id: false\n\t\t\t\tlist:\n\t\t\t\t\t$hide: true\n\t\t\t\t\t$id: false\n\t\t\t}\n\t\tit 'should return routes types', ->\n\t\t\tassert trocha.ALIAS, \"ALIAS\"\n\t\t\tassert trocha.SCOPE, \"SCOPE\"\n\t\t\tassert trocha.ROUTE, \"ROUTE\"\n\t\t\tassert trocha.RESOURCE, \"RESOURCE\"\n\n\tconstants_test = undefined\n\nconstructor_test = ->\n\tdescribe 'Constructor', ->\n\t\tit 'should create a valid trocha object', ->\n\t\t\tassert trocha, ->\n\t\t\tr = trocha()\n\t\t\tassert r, {}\n\t\t\tassert r._custom, ->\n\t\t\tassert r._newResource, ->\n\t\t\tassert r._newRoute, ->\n\t\t\tassert r._newScope, ->\n\n\tconstructor_test = undefined\n\nroutes_creation_test = ->\n\tdescribe 'Route creation', ->\n\t\tdescribe 'Route creation params', ->\n\t\t\tit 'should create routes without name printing', ->\n\t\t\t\tr = trocha routes: simple_route_without_name: $hide: true\n\t\t\t\tassert r.simple_route_without_name.path(), ''\n\n\t\t\tit 'should create routes with method', ->\n\t\t\t\tr = trocha routes: simple_route_with_method: $method: trocha.POST\n\t\t\t\tassert r.simple_route_with_method.$method, 'POST'\n\n\t\t\tit 'should create routes with id', ->\n\t\t\t\tr = trocha routes: simple_id_route: $id: 'simple_id'\n\t\t\t\tassert r.simple_id_route.path(), '/simple_id_route/:simple_id'\n\n\t\t\tit 'should create routes with hiden parent id', ->\n\t\t\t\tr = trocha routes: simple_id_route:\n\t\t\t\t\t$id: 'simple_id'\n\t\t\t\t\twithout_parent_id: $id: false\n\t\t\t\tassert r.simple_id_route.without_parent_id.path(), '/simple_id_route/without_parent_id'\n\n\t\t\tit 'should create routes with just id', ->\n\t\t\t\tr = trocha routes: simple_route_with_just_id:\n\t\t\t\t\t$justId: true\n\t\t\t\t\t$id: 'simple_id'\n\t\t\t\tassert r.simple_route_with_just_id.path(), '/:simple_id'\n\n\t\t\t# will fail\n\t\t\tit 'should create routes with after id', ->\n\t\t\t\tr = trocha routes: simple_route_with_after_id:\n\t\t\t\t\t$afterId: true\n\t\t\t\t\t$id: 'simple_id'\n\t\t\t\tassert r.simple_route_with_after_id.path(), '/:simple_id/simple_route_with_after_id'\n\n\t\t\tit 'should create routes with hiden parents id and child id', ->\n\t\t\t\tr = trocha routes: simple_id_route:\n\t\t\t\t\t$id: 'simple_id'\n\t\t\t\t\thide_parent_id:\n\t\t\t\t\t\t$id: 'child_id'\n\t\t\t\t\t\t$parentId: false\n\t\t\t\t\tid_2:\n\t\t\t\t\t\t$id: 'child_id'\n\t\t\t\t\t\t$parentId: false\n\t\t\t\t\t\thide_parents_id:\n\t\t\t\t\t\t\tchild_id: false\n\t\t\t\t\t\t# overide_id:\n\t\t\t\t\t\t# \tsimple_id: true # does not compute\n\t\t\t\t\t\thide_glitch:\n\t\t\t\t\t\t\t$id: '$hide'\n\t\t\t\t\t\t\t# simple_id: ':$hide' # does not compute\n\t\t\t\t\t\t\tl:\n\t\t\t\t\t\t\t\t$hide: false # This will be ignore in constructor\n\t\t\t\tassert r.simple_id_route.hide_parent_id.path(), '/simple_id_route/hide_parent_id/:child_id'\n\t\t\t\tassert r.simple_id_route.id_2.hide_parents_id.path(), '/simple_id_route/id_2/hide_parents_id'\n\t\t\t\t#check Override\n\t\t\t\tassert r.simple_id_route.hide_parent_id.path(simple_id: 'asd'), '/simple_id_route/asd/hide_parent_id/:child_id'\n\t\t\t\tassert r.simple_id_route.id_2.hide_parents_id.path(child_id: 'asd'), '/simple_id_route/id_2/asd/hide_parents_id'\n\t\t\t\t# assert r.simple_id_route.id_2.overide_id.path(), '/simple_id_route/asd/id_2/:child_id/overide_id'\n\t\t\t\tassert r.simple_id_route.id_2.hide_glitch.l.path(), '/simple_id_route/id_2/:child_id/hide_glitch/:$hide/l'\n\n\t\t\t# will fail\n\t\t\tit 'should create routes with postfix', ->\n\t\t\t\tr = trocha routes: simple_route_post:\n\t\t\t\t\t$post: 'the_post'\n\t\t\t\tassert r.simple_route_post.path(), '/simple_route_postthe_post'\n\n\t\t\t\tassert r.simple_id_route.path(simple_id: 'the_simple_id'), '/simple_id_route/the_simple_id'\n\t\t\t\tassert r.simple_id_route.path(simple_id: false), '/simple_id_route'\n\n\t\tit 'should create routes via JSON Constructor', ->\n\t\t\tr = trocha\n\t\t\t\troutes:\n\t\t\t\t\tsimple_route: {}\n\t\t\t\t\tsimple_scope: {$type: trocha.SCOPE}\n\t\t\t\t\tsimple_alias: \"simple_alias\"\n\t\t\t\t\tsimple_resource:\n\t\t\t\t\t\t$type: trocha.RESOURCE\n\t\t\t\t\t\t$id: \"simple_id\" #resource must have ID\n\n\t\t\tassert r.simple_route, {}\n\t\t\tassert r.simple_scope, {}\n\t\t\tassert r.simple_resource, {}\n\t\t\tassert r.simple_alias, {} # will fail\n\t\t\tassert r.simple_alias, \"simple_alias\" # @TODO remove me after alias fix\n\t\tit 'should create routes via post init functions', ->\n\t\t\tr = trocha()\n\t\t\tr._newRoute {\n\t\t\t\tname: \"simple_route\"\n\t\t\t}\n\t\t\tr.simple_route._newRoute {\n\t\t\t\tname: \"simple_route\"\n\t\t\t}\n\t\t\tr._newScope {\n\t\t\t\tname: \"simple_scope\"\n\t\t\t}\n\t\t\tr._newResource {\n\t\t\t\tname: \"simple_resource\"\n\t\t\t\tid: \"simple_id\"\n\t\t\t}\n\t\t\tr._newAlias {\n\t\t\t\tname: \"simple_alias\"\n\t\t\t\talias: \"simple_alias\"\n\t\t\t}\n\t\t\tassert r.simple_route, {}\n\t\t\tassert r.simple_route.simple_route, {}\n\t\t\tassert r.simple_scope, {}\n\t\t\tassert r.simple_resource, {}\n\t\t\tassert r.simple_alias, \"simple_alias\"\n\n\troutes_creation_test = undefined\n\nfunction_path_test = ->\n\tdescribe 'function path', ->\n\t\tmyRoutesParams =\n\t\t\tpre: '/templates' # note the /\n\t\t\tpost: '-myH45H.html'\n\t\t\tdomain: 'https://mydomain.net.co'\n\t\t\troutes:\n\t\t\t\ttown:\n\t\t\t\t\t$id: 'town_name'\n\t\t\t\t\thouse:\n\t\t\t\t\t\t$id: 'address'\n\t\tmyRoutes = trocha _clone myRoutesParams\n\t\tdescribe 'path() diferent params', ->\n\t\t\tit 'no params', ->\n\t\t\t\tassertFunctionError myRoutes.path\n\t\t\t\tassert myRoutes.town.path(), '/town/:town_name'\n\t\t\t\tassert myRoutes.town.house.path(), '/town/:town_name/house/:address'\n\n\t\t\tit 'url', ->\n\t\t\t\t# true print domain if alwaysUrl is not set.\n\t\t\t\tassert myRoutes.town.path(), '/town/:town_name'\n\t\t\t\tassert myRoutes.town.path(url: true), 'https://mydomain.net.co/town/:town_name'\n\t\t\t\t# false dnt print domain if alwaysUrl is set.\n\t\t\t\t_myRoutesParams = _clone myRoutesParams\n\t\t\t\t_myRoutesParams.alwaysUrl = true\n\t\t\t\t_myRoutes = trocha _myRoutesParams\n\t\t\t\tassert _myRoutes.town.path(), 'https://mydomain.net.co/town/:town_name'\n\t\t\t\tassert _myRoutes.town.path(url: false), '/town/:town_name' # will fail\n\n\t\t\tit 'pre', ->\n\t\t\t\t# true print prefix.\n\t\t\t\tassert myRoutes.town.path(), '/town/:town_name'\n\t\t\t\tassert myRoutes.town.path(pre: true), '/templates/town/:town_name'\n\n\t\t\tit 'post', ->\n\t\t\t\t# <Boolean> if post: true print the postfix, if post: false(note just false not undefined nor null nor 0) will ignore alwaysPost route param.\n\t\t\t\tassert myRoutes.town.path(), '/town/:town_name'\n\t\t\t\tassert myRoutes.town.path(post: true), '/town/:town_name-myH45H.html'\n\t\t\t\t_myRoutesParams = _clone myRoutesParams\n\t\t\t\t_myRoutesParams.alwaysPost = true\n\t\t\t\t_myRoutes = trocha _myRoutesParams\n\t\t\t\tassert _myRoutes.town.path(), '/town/:town_name-myH45H.html'\n\t\t\t\tassert _myRoutes.town.path(post: false), '/town/:town_name'\n\n\t\t\tit 'ext', ->\n\t\t\t\t# true (extended) print prefix and postfix.\n\t\t\t\tassert myRoutes.town.path(), '/town/:town_name'\n\t\t\t\tassert myRoutes.town.path(ext: true), '/templates/town/:town_name-myH45H.html'\n\n\t\t\tit 'hide', ->\n\t\t\t\t# true Hide the last name of the path, if an id is setted it will appears anyway.\n\t\t\t\tassert myRoutes.town.path(hide: true), '/:town_name'\n\n\t\t\tit 'parentId', ->\n\t\t\t\t# false Hide the parent route id.\n\t\t\t\tassert myRoutes.town.house.path(parentId: false), '/town/house/:address'\n\n\t\t\tit 'id', ->\n\t\t\t\t# false Hide the route id.\n\t\t\t\tassert myRoutes.town.path(id: false), '/town'\n\t\t\t\tassert myRoutes.town.house.path(id: false), '/town/:town_name/house'\n\n\t\t\tit '<someId>', ->\n\t\t\t\t# <someId>: String set the value of some id of the route.\n\t\t\t\tassert myRoutes.town.path(town_name: ''), '/town/'\n\t\t\t\tassert myRoutes.town.path(town_name: 'Engativá'), '/town/Engativá'\n\t\t\t\tassert myRoutes.town.house.path(address: 'calle_falsa'), '/town/:town_name/house/calle_falsa'\n\t\t\t\tassert myRoutes.town.house.path(address: 'calle_falsa',town_name: false), '/town/house/calle_falsa'\n\n\t\t\tit 'query', ->\n\t\t\t\t# {<attribute>:<value>} Print a define query ?<attribute>=<value>&....\n\t\t\t\tassert myRoutes.town.path(\n\t\t\t\t\tquery:\n\t\t\t\t\t\tdescription: true\n\t\t\t\t\t\tpictures: 4\n\t\t\t\t), '/town/:town_name?description=true&pictures=4'\n\n\t\t\tit 'fragment', ->\n\t\t\t\t# String Print the fragment #<value>.\n\t\t\t\tassert myRoutes.town.path( fragment: 'references'), '/town/:town_name#references'\n\n\tfunction_path_test = undefined\n\n(->\n\tdescribe 'Trocha JS Routes List engine', ->\n\t\tconstants_test()\n\t\tconstructor_test()\n\t\troutes_creation_test()\n\t\tfunction_path_test()\n\ttest.run()\n)()\n\n\n"
  ]
}