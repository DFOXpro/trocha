{
  "version": 3,
  "file": "test.js",
  "sourceRoot": "",
  "sources": [
    "test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "(->\n\ttestFramework = (options) ->\n\t\tresults =\n\t\t\trunningDescribe: null\n\t\t\tdescribesToTest: []\n\t\t\tasserts: 0\n\t\t\tbadAsserts: 0\n\t\t\ttotalBaseDescribes: 0\n\t\t\ttotal: 0\n\t\t\tbad: 0\n\n\t\tr = {}\n\t\tr.it = (doString, itFun) ->\n\t\t\tconsole.log doString\n\t\t\ttry\n\t\t\t\titFun()\n\t\t\tcatch e\n\t\t\t\tconsole.error \"BROKEN EXAMPLE \" + doString\n\t\t\t\tconsole.error \"Exception caught\", e\n\t\t\t\n\t\tr.describe = (title, describeFun) ->\n\t\t\tsuccessPromp = ->\n\t\t\t\tconsole.log \"%c#{desc.title} test success.\", \"color: white; font-style: italic; background-color: green;padding: 1em\"\n\t\t\tfailWarning = ->\n\t\t\t\tdesc.fail = true\n\t\t\t\tresults.bad++\n\t\t\t\tconsole.log \"%c#{desc.title} test failed.\", \"color: white; font-style: italic; background-color: red;padding: 1em\"\n\n\t\t\tdesc =\n\t\t\t\ttitle: ''\n\t\t\t\tfun: describeFun\n\t\t\t\tchildsDescribes: []\n\t\t\t\ttotalChilds: 0\n\t\t\t\tfailWarning: failWarning\n\t\t\t\tsuccessPromp: successPromp\n\t\t\tif results.runningDescribe\n\t\t\t\tdesc.parent = results.runningDescribe\n\t\t\t\tdesc.position = ++desc.parent.totalChilds\n\t\t\telse\n\t\t\t\tdesc.parent = totalChilds: results.totalBaseDescribes\n\t\t\tresults.total++\n\n\t\t\t_descNumeral = (_desc) ->\n\t\t\t\tdesc.title = \"#{_desc.position}.#{desc.title}\" if _desc.position\n\t\t\t\tif _desc.parent\n\t\t\t\t\t_descNumeral _desc.parent\n\t\t\t\telse\n\t\t\t\t\tdesc.title += \" #{title}\"\n\t\t\t_descNumeral desc\n\n\t\t\tif desc.parent.childsDescribes\n\t\t\t\tdesc.parent.childsDescribes.push desc\n\t\t\telse\n\t\t\t\tresults.describesToTest.push desc\n\n\t\tr.assertFunctionError = (faultyFunction, params, expectedException) ->\n\t\t\ttry\n\t\t\t\tfaultyFunction params\n\t\t\t\tresults.badAsserts++\n\t\t\t\tresults.runningDescribe.fail = true\n\t\t\t\tconsole.assert false, {expectedException: expectedException, msg: 'Expected error in function buts runs ok'}\n\t\t\tcatch e\n\t\t\t\t# console.log 'Spected error was an error', e\n\n\t\tr.assert = (result, expected) ->\n\t\t\tassertFail = false\n\t\t\tresults.asserts++\n\t\t\terrorMessage = ''\n\t\t\tif 'object' == typeof expected\n\t\t\t\tif 'object' != typeof result\n\t\t\t\t\tassertFail = true\n\t\t\t\t\terrorMessage = \"Expected any object\"\n\t\t\telse if 'function' == typeof expected\n\t\t\t\tif 'function' != typeof result\n\t\t\t\t\tassertFail = true\n\t\t\t\t\terrorMessage = \"Expected any function\"\n\t\t\telse if result != expected\n\t\t\t\tassertFail = true\n\t\t\t\terrorMessage = \"Expected #{expected}, but was: #{result}\"\n\t\t\tif assertFail\n\t\t\t\tresults.badAsserts++\n\t\t\t\tresults.runningDescribe.fail = true\n\t\t\t\ttry\n\t\t\t\t\tthrow new Error 'Assert fail'\n\t\t\t\tcatch e\n\t\t\t\t\tconsole.assert false, {expected: expected, result: result, msg: errorMessage}\n\t\t\t\t\tconsole.warn e\n\t\t\treturn assertFail\n\n\t\tr.run = ->\n\t\t\t_runDescribes = (describes) ->\n\t\t\t\tsuccess = true\n\t\t\t\twhile describes.length > 0\n\t\t\t\t\t_currentDescribe = results.runningDescribe = describes.shift()\n\t\t\t\t\tconsole.info \"Testing \" + results.runningDescribe.title\n\t\t\t\t\ttry\n\t\t\t\t\t\t_currentDescribe.fun()\n\t\t\t\t\t\tsuccess = false if !_runDescribes _currentDescribe.childsDescribes\n\t\t\t\t\t\t_currentDescribe.fail = true if !success\n\t\t\t\t\tcatch e\n\t\t\t\t\t\t_currentDescribe.fail = true\n\t\t\t\t\t\tconsole.error \"Exception caught\", e\n\t\t\t\t\tif _currentDescribe.fail\n\t\t\t\t\t\t_currentDescribe.failWarning()\n\t\t\t\t\telse\n\t\t\t\t\t\t_currentDescribe.successPromp()\n\t\t\t\treturn success\n\t\t\t_runDescribes results.describesToTest\n\n\t\t\tconsole.log(\n\t\t\t\t\"Of (#{results.asserts - results.badAsserts}/#{results.asserts}) assert\",\n\t\t\t\t\"(#{(results.total - results.bad)}/#{results.total}) tests, #{results.bad} failed\"\n\t\t\t)\n\n\t\tif options && options.global\n\t\t\tObject.keys(r).forEach (attr) ->\n\t\t\t\twindow[attr] = r[attr]\n\n\t\tr\n\n\ttest = testFramework global: true\n\n\t# Note this function does not clone functions\n\t_clone = (object) ->\n\t\tJSON.parse JSON.stringify object\n\n\tconstants_test = ->\n\t\tdescribe 'Constants returns', ->\n\t\t\tit 'should be no editable', ->\n\t\t\t\tTrocha.ROUTE = \"Atack!Route\"\n\t\t\t\tTrocha.OPTIONS = \"Atack!Option\"\n\t\t\t\tTrocha.$RESOURCE = \"Atack!$Resource\"\n\t\t\t\tassert Trocha.ROUTE, \"ROUTE\"\n\t\t\t\tassert Trocha.OPTIONS, \"OPTIONS\"\n\t\t\t\tassert Trocha.$RESOURCE, {}\n\t\t\tit 'should return HTTP request methods types', ->\n\t\t\t\tassert Trocha.OPTIONS, \"OPTIONS\"\n\t\t\t\tassert Trocha.GET, \"GET\"\n\t\t\t\tassert Trocha.HEAD, \"HEAD\"\n\t\t\t\tassert Trocha.POST, \"POST\"\n\t\t\t\tassert Trocha.PUT, \"PUT\"\n\t\t\t\tassert Trocha.PATCH, \"PATCH\"\n\t\t\t\tassert Trocha.DELETE, \"DELETE\"\n\t\t\t\tassert Trocha.TRACE, \"TRACE\"\n\t\t\t\tassert Trocha.CONNECT, \"CONNECT\"\n\t\t\tit 'should return default resource tree', ->\n\t\t\t\tassert Trocha.$RESOURCE, {\n\t\t\t\t\t$id: 'id'\n\t\t\t\t\tshow:\n\t\t\t\t\t\t$hide: true\n\t\t\t\t\tedit: {}\n\t\t\t\t\tnew:\n\t\t\t\t\t\t$id: false\n\t\t\t\t\tlist:\n\t\t\t\t\t\t$hide: true\n\t\t\t\t\t\t$id: false\n\t\t\t\t}\n\t\t\tit 'should return routes types', ->\n\t\t\t\tassert Trocha.ALIAS, \"ALIAS\"\n\t\t\t\tassert Trocha.SCOPE, \"SCOPE\"\n\t\t\t\tassert Trocha.ROUTE, \"ROUTE\"\n\t\t\t\tassert Trocha.RESOURCE, \"RESOURCE\"\n\n\t\tconstants_test = undefined\n\n\tconstructor_test = ->\n\t\tdescribe 'Constructor', ->\n\t\t\tit 'should check trocha is a class object', ->\n\t\t\t\t# https://stackoverflow.com/questions/1249531/how-to-get-a-javascript-objects-class\n\t\t\t\tassert Trocha, ->\n\t\t\t\tr = new Trocha()\n\t\t\t\tassert Trocha.name, \"Trocha\"\n\t\t\tit 'should create a valid trocha object', ->\n\t\t\t\tr = new Trocha()\n\t\t\t\tassert r, {}\n\t\t\t\tassert r._newAlias, ->\n\t\t\t\tassert r._newResource, ->\n\t\t\t\tassert r._newRoute, ->\n\t\t\t\tassert r._newScope, ->\n\t\t\t\tassert r.$RESOURCE, {}\n\t\t\t\tassertFunctionError r.path\n\n\t\tconstructor_test = undefined\n\n\tbase_variables = ->\n\t\tdescribe 'Base variables returns', ->\n\t\t\tit 'should set customSelector', ->\n\t\t\t\tr = new Trocha()\n\t\t\t\tassert r.$RESOURCE, {}\n\t\t\t\tassert r.$domain, \"\"\n\t\t\t\tr = new Trocha({customSelector: '$$'})\n\t\t\t\tassert r.$$RESOURCE, {}\n\t\t\t\tassert r.$$domain, \"\"\n\t\t\tit 'should set domain', ->\n\t\t\t\tr = new Trocha()\n\t\t\t\tassert r.$domain, \"\"\n\t\t\t\tr = new Trocha({domain: 'asd'})\n\t\t\t\tassert r.$domain, \"asd\"\n\t\tbase_variables = undefined\n\n\troutes_creation_test = ->\n\t\tdescribe 'Route creation', ->\n\t\t\tit 'should create routes via JSON Constructor', ->\n\t\t\t\tr = new Trocha\n\t\t\t\t\troutes:\n\t\t\t\t\t\tsimple_route: {}\n\t\t\t\t\t\tsimple_scope: {$type: Trocha.SCOPE}\n\t\t\t\t\t\tsimple_alias: \"simple_alias\"\n\t\t\t\t\t\tsimple_resource:\n\t\t\t\t\t\t\t$type: Trocha.RESOURCE\n\t\t\t\t\t\t\t$id: \"simple_id\" #resource must have ID\n\n\t\t\t\tassert r.simple_route, {}\n\t\t\t\tassert r.simple_scope, {}\n\t\t\t\tassert r.simple_resource, {}\n\t\t\t\tassert r.simple_alias, {}\n\n\t\t\tit 'should create routes via post init functions', ->\n\t\t\t\tr = new Trocha()\n\t\t\t\tr._newRoute {\n\t\t\t\t\tname: \"simple_route\"\n\t\t\t\t}\n\t\t\t\tassert r.simple_route, {}\n\t\t\t\tr.simple_route._newRoute {\n\t\t\t\t\tname: \"simple_route\"\n\t\t\t\t}\n\t\t\t\tassert r.simple_route.simple_route, {}\n\t\t\t\tr._newScope {\n\t\t\t\t\tname: \"simple_scope\"\n\t\t\t\t\tid: \"my_id\"\n\t\t\t\t}\n\t\t\t\tassert r.simple_scope, {}\n\t\t\t\tr._newResource {\n\t\t\t\t\tname: \"simple_resource\"\n\t\t\t\t\tid: \"simple_id\"\n\t\t\t\t}\n\t\t\t\tassert r.simple_resource, {}\n\t\t\t\tr._newAlias {\n\t\t\t\t\tname: \"simple_alias\"\n\t\t\t\t\talias: \"simple_alias\"\n\t\t\t\t}\n\t\t\t\tassert r.simple_alias, {}\n\n\t\t\tdescribe 'Route creation params', ->\n\t\t\t\tit 'should create trivial route', ->\n\t\t\t\t\tr = new Trocha routes: simple_route: {}\n\t\t\t\t\tassert r.simple_route.path(), '/simple_route'\n\t\t\t\tit 'should create routes without name printing', ->\n\t\t\t\t\tr = new Trocha routes: simple_route_without_name: $hide: true\n\t\t\t\t\tassert r.simple_route_without_name.path(), ''\n\n\t\t\t\tit 'should create routes with method', ->\n\t\t\t\t\tr = new Trocha routes: simple_route_with_method: $method: Trocha.POST\n\t\t\t\t\tassert r.simple_route_with_method.$method, 'POST'\n\n\t\t\t\tit 'should create routes with id', ->\n\t\t\t\t\tr = new Trocha routes: simple_id_route: $id: 'simple_id'\n\t\t\t\t\tassert r.simple_id_route.path(), '/simple_id_route/:simple_id'\n\n\t\t\t\tit 'should create routes with hiden parent id', ->\n\t\t\t\t\tr = new Trocha routes: simple_id_route:\n\t\t\t\t\t\t$id: 'simple_id'\n\t\t\t\t\t\twithout_parent_id: $id: false\n\t\t\t\t\tassert r.simple_id_route.without_parent_id.path(), '/simple_id_route/without_parent_id'\n\n\t\t\t\tit 'should create routes with just id', ->\n\t\t\t\t\tr = new Trocha routes: simple_route_with_just_id:\n\t\t\t\t\t\t$justId: true\n\t\t\t\t\t\t$id: 'simple_id'\n\t\t\t\t\tassert r.simple_route_with_just_id.path(), '/:simple_id'\n\n\t\t\t\t# # will fail\n\t\t\t\t# it 'should create routes with after id', ->\n\t\t\t\t# \tr = new Trocha routes: simple_route_with_after_id:\n\t\t\t\t# \t\t$afterId: true\n\t\t\t\t# \t\t$id: 'simple_id'\n\t\t\t\t# \tassert r.simple_route_with_after_id.path(), '/:simple_id/simple_route_with_after_id'\n\n\t\t\t\tit 'should create routes with hiden parents id and child id', ->\n\t\t\t\t\tr = new Trocha routes: simple_id_route:\n\t\t\t\t\t\t$id: 'simple_id'\n\t\t\t\t\t\thide_parent_id:\n\t\t\t\t\t\t\t$id: 'child_id'\n\t\t\t\t\t\t\t$parentId: false\n\t\t\t\t\t\tid_2:\n\t\t\t\t\t\t\t$id: 'child_id'\n\t\t\t\t\t\t\t$parentId: false\n\t\t\t\t\t\t\thide_parents_id:\n\t\t\t\t\t\t\t\tchild_id: false\n\t\t\t\t\t\t\t# overide_id:\n\t\t\t\t\t\t\t# \tsimple_id: true # does not compute\n\t\t\t\t\t\t\thide_glitch:\n\t\t\t\t\t\t\t\t$id: '$hide'\n\t\t\t\t\t\t\t\t# simple_id: ':$hide' # does not compute\n\t\t\t\t\t\t\t\tl:\n\t\t\t\t\t\t\t\t\t$hide: false # This will be ignore in constructor\n\n\t\t\t\t\tassert r.simple_id_route.hide_parent_id.path(), '/simple_id_route/hide_parent_id/:child_id'\n\t\t\t\t\tassert r.simple_id_route.id_2.hide_parents_id.path(), '/simple_id_route/id_2/hide_parents_id'\n\t\t\t\t\t#check Override\n\t\t\t\t\tassert r.simple_id_route.hide_parent_id.path(simple_id: 'asd'), '/simple_id_route/asd/hide_parent_id/:child_id'\n\t\t\t\t\tassert r.simple_id_route.id_2.hide_parents_id.path(child_id: 'asd'), '/simple_id_route/id_2/asd/hide_parents_id'\n\t\t\t\t\t# assert r.simple_id_route.id_2.overide_id.path(), '/simple_id_route/asd/id_2/:child_id/overide_id'\n\t\t\t\t\tassert r.simple_id_route.id_2.hide_glitch.l.path(), '/simple_id_route/id_2/:child_id/hide_glitch/:$hide/l'\n\n\t\t\t\tit 'should create routes with prefix', ->\n\t\t\t\t\tr = new Trocha\n\t\t\t\t\t\tpre: '.the_pre.'\n\t\t\t\t\t\troutes: simple_route_pre: {}\n\t\t\t\t\tassert r.simple_route_pre.path(), '/simple_route_pre'\n\t\t\t\t\tassert r.simple_route_pre.path({pre: true}), '.the_pre./simple_route_pre'\n\t\t\t\t\tassert r.simple_route_pre.path({ext: true}), '.the_pre./simple_route_pre'\n\t\t\t\tit 'should create routes with postfix', ->\n\t\t\t\t\tr = new Trocha\n\t\t\t\t\t\tpost: '.the_post'\n\t\t\t\t\t\talwaysPost: true\n\t\t\t\t\t\troutes: simple_route_post: {}\n\t\t\t\t\tassert r.simple_route_post.path(), '/simple_route_post.the_post'\n\t\t\t\t\tr = new Trocha\n\t\t\t\t\t\tpost: '.the_post'\n\t\t\t\t\t\troutes: simple_route_post: {}\n\t\t\t\t\tassert r.simple_route_post.path(), '/simple_route_post'\n\t\t\t\t\tassert r.simple_route_post.path({post: true}), '/simple_route_post.the_post'\n\t\t\t\t\tassert r.simple_route_post.path({ext: true}), '/simple_route_post.the_post'\n\n\t\troutes_creation_test = undefined\n\n\troute_types_test = ->\n\t\tdescribe 'Route types', ->\n\t\t\tit 'should create a route(type route)', ->\n\t\t\t\tr = new Trocha\n\t\t\t\t\troutes:\n\t\t\t\t\t\tsimple_route:\n\t\t\t\t\t\t\t$type: Trocha.ROUTE\n\t\t\t\t\t\tsimple_route_with_id:\n\t\t\t\t\t\t\t$id: 'my_id'\n\t\t\t\t\t\t\t$type: Trocha.ROUTE\n\t\t\t\t\t\tsimple_route_with_method:\n\t\t\t\t\t\t\t$method: Trocha.POST\n\t\t\t\t\t\tThe:\n\t\t\t\t\t\t\tquick:\n\t\t\t\t\t\t\t\t\tbrown:\n\t\t\t\t\t\t\t\t\t\t\tfox:\n\t\t\t\t\t\t\t\t\t\t\t\t\tjumps:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tover:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlazy:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdog: {}\n\t\t\t\tassert r.simple_route, {}\n\t\t\t\tassert r.simple_route.constructor.name, \"Route\"\n\t\t\t\tassert r.simple_route.path(), '/simple_route'\n\t\t\t\tassert r.simple_route_with_id.path(), '/simple_route_with_id/:my_id'\n\t\t\t\tassert r.simple_route_with_method.$method, 'POST'\n\t\t\t\tassert r.The.quick.brown.path(), '/The/quick/brown'\n\t\t\t\tassert r.The.quick.brown.fox.jumps.over.the.lazy.dog.path(), '/The/quick/brown/fox/jumps/over/the/lazy/dog'\n\t\t\t\tassert r.The.quick.brown.fox.jumps.over.the.lazy.dog.$as, 'The_quick_brown_fox_jumps_over_the_lazy_dog'\n\t\t\t\tr._newRoute\n\t\t\t\t\tname: 'route_from_method'\n\n\t\t\tit 'should create an alias(route type alias)', ->\n\t\t\t\tr = new Trocha\n\t\t\t\t\troutes:\n\t\t\t\t\t\tquick_alias: 'a.flash/alias'\n\t\t\t\t\t\tsimple_alias:\n\t\t\t\t\t\t\t$type: Trocha.ALIAS\n\t\t\t\t\t\t\t$alias: 'the.simple.alias'\n\t\t\t\t\t\tsimple_alias_with_id:\n\t\t\t\t\t\t\t$type: Trocha.ALIAS\n\t\t\t\t\t\t\t$alias: 'the.simple.alias/with/id'\n\t\t\t\t\t\t\t$id: 'my_id'\n\t\t\t\t\t\tsimple_alias_with_method:\n\t\t\t\t\t\t\t$type: Trocha.ALIAS\n\t\t\t\t\t\t\t$alias: 'the.simple.alias/with?method'\n\t\t\t\t\t\t\t$method: Trocha.POST\n\t\t\t\t\t\tThe:\n\t\t\t\t\t\t\tquick:\n\t\t\t\t\t\t\t\t\tbrown:\n\t\t\t\t\t\t\t\t\t\t\tfox:\n\t\t\t\t\t\t\t\t\t\t\t\t\tjumps:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tover:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlazy:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdog: 'cat'\n\t\t\t\tassert r.simple_alias, {}\n\t\t\t\tassert r.simple_alias.constructor.name, \"Alias\"\n\t\t\t\tassert r.quick_alias.path(), 'a.flash/alias'\n\t\t\t\tassert r.simple_alias.path(), 'the.simple.alias'\n\t\t\t\tassert r.simple_alias_with_id.path(), 'the.simple.alias/with/id/:my_id'\n\t\t\t\tassert r.simple_alias_with_method.path(), 'the.simple.alias/with?method'\n\t\t\t\tassert r.simple_alias_with_method.$method, 'POST'\n\t\t\t\tassert r.The.quick.brown.fox.jumps.over.the.lazy.dog.path(), '/The/quick/brown/fox/jumps/over/the/lazy/cat'\n\t\t\t\tassert r.The.quick.brown.fox.jumps.over.the.lazy.dog.$as, 'The_quick_brown_fox_jumps_over_the_lazy_dog'\n\t\t\t\tr._newAlias({\n\t\t\t\t\tname: 'method_alias'\n\t\t\t\t\talias: 'asd'\n\t\t\t\t\tid: 'qwe'\n\t\t\t\t\tmethod:Trocha.PATCH\n\t\t\t\t})\n\t\t\t\tr.The.quick.brown.fox.jumps.over.the.lazy._newAlias({\n\t\t\t\t\tname: 'cat'\n\t\t\t\t\talias: 'tigger'\n\t\t\t\t})\n\t\t\t\tassert r.The.quick.brown.fox.jumps.over.the.lazy.cat.path(), '/The/quick/brown/fox/jumps/over/the/lazy/tigger'\n\t\t\t\tassert r.method_alias.path(), 'asd/:qwe'\n\t\t\t\tassert r.method_alias.$method, 'PATCH'\n\n\t\t\tit 'should create an resource(routes tree resource)', ->\n\t\t\t\tr = new Trocha\n\t\t\t\t\troutes:\n\t\t\t\t\t\tproducts:\n\t\t\t\t\t\t\t$type: Trocha.RESOURCE\n\t\t\t\t\t\t\t$id: \"product_id\"\n\t\t\t\tassert r.products.constructor.name, \"Resource\"\n\t\t\t\tassert r.products.list.constructor.name, \"Route\"\n\t\t\t\tassert r.products.list.path(), '/products'\n\t\t\t\tassert r.products.new.path(), '/products/new'\n\t\t\t\tassert r.products.show.path(), '/products/:product_id'\n\t\t\t\tassert r.products.edit.path(), '/products/:product_id/edit'\n\t\t\t\tr._newResource\n\t\t\t\t\tname: \"services\"\n\t\t\t\t\tid: \"service_id\"\n\t\t\t\tassert r.services.list.path(), '/services'\n\t\t\t\tassert r.services.new.path(), '/services/new'\n\t\t\t\tassert r.services.show.path(), '/services/:service_id'\n\t\t\t\tassert r.services.edit.path(), '/services/:service_id/edit'\n\n\t\t\t\tit 'should create a custom resource', ->\n\t\t\t\t\tr = new Trocha\n\t\t\t\t\t\troutes:\n\t\t\t\t\t\t\tproducts:\n\t\t\t\t\t\t\t\t$type: Trocha.RESOURCE\n\t\t\t\t\t\t\t\t$id: \"product_id\"\n\t\t\t\t\t\t\t\t$resource:\n\t\t\t\t\t\t\t\t\tcreate:\n\t\t\t\t\t\t\t\t\t\t$method: Trocha.POST\n\t\t\t\t\t\t\t\t\t\t$parentId: false\n\t\t\t\t\t\t\t\t\t\t$hide: true\n\t\t\t\t\t\t\t\t\tread: $hide: true\n\t\t\t\t\t\t\t\t\tupdate:\n\t\t\t\t\t\t\t\t\t\t$method: Trocha.PATCH\n\t\t\t\t\t\t\t\t\t\t$hide: true\n\t\t\t\t\t\t\t\t\tdelete:\n\t\t\t\t\t\t\t\t\t\t$method: Trocha.DELETE\n\t\t\t\t\t\t\t\t\t\t$hide: true\n\t\t\t\t\tassert r.products.constructor.name, \"Resource\"\n\t\t\t\t\tassert r.products.create.constructor.name, \"Route\"\n\t\t\t\t\tassert r.products.create.path(), '/products'\n\t\t\t\t\tassert r.products.create.$method, 'POST'\n\t\t\t\t\tassert r.products.read.path(), '/products/:product_id'\n\t\t\t\t\tassert r.products.read.$method, 'GET'\n\t\t\t\t\tassert r.products.update.path(), '/products/:product_id'\n\t\t\t\t\tassert r.products.update.$method, 'PATCH'\n\t\t\t\t\tassert r.products.delete.path(), '/products/:product_id'\n\t\t\t\t\tassert r.products.delete.$method, 'DELETE'\n\t\t\t\t\tr._newResource\n\t\t\t\t\t\tname: \"services\"\n\t\t\t\t\t\tid: \"service_id\"\n\t\t\t\t\tassert r.services.list.path(), '/services'\n\t\t\t\t\tassert r.services.new.path(), '/services/new'\n\t\t\t\t\tassert r.services.show.path(), '/services/:service_id'\n\t\t\t\t\tassert r.services.edit.path(), '/services/:service_id/edit'\n\n\t\t\tit 'should create an scope(route type scope)', ->\n\t\t\t\tr = new Trocha\n\t\t\t\t\troutes:\n\t\t\t\t\t\tlanguage:\n\t\t\t\t\t\t\t$type: Trocha.SCOPE\n\t\t\t\t\t\t\t$id: 'language_id'\n\t\t\t\t\t\t\tproducts:\n\t\t\t\t\t\t\t\t$type: Trocha.RESOURCE\n\t\t\t\t\t\t\t\t$id: \"product_id\"\n\t\t\t\twindow.asd = r\n\t\t\t\tassert r.language.constructor.name, \"Scope\"\n\t\t\t\tassertFunctionError r.language.path\n\t\t\t\tassert r.language.products.list.path(), '/:language_id/products'\n\t\t\t\tassert r.language.products.list.path({language_id: false}), '/products'\n\t\t\t\tassert r.products.list.path(), '/products'\n\t\t\t\tassert r.language.products.list.path({language_id: 'es'}), '/es/products'\n\t\t\t\tr._newScope\n\t\t\t\t\tname: \"lingua\"\n\t\t\t\t\tid: \"lingua_id\"\n\t\t\t\t\thide: false\n\t\t\t\tr.lingua._newResource\n\t\t\t\t\tname: \"services\"\n\t\t\t\t\tid: \"service_id\"\n\n\t\troute_types_test = undefined\n\n\tfunction_path_test = ->\n\t\tdescribe 'function path', ->\n\t\t\tmyRoutesParams =\n\t\t\t\tpre: '/templates' # note the /\n\t\t\t\tpost: '-myH45H.html'\n\t\t\t\tdomain: 'https://mydomain.net.co'\n\t\t\t\troutes:\n\t\t\t\t\ttown:\n\t\t\t\t\t\t$id: 'town_name'\n\t\t\t\t\t\thouse:\n\t\t\t\t\t\t\t$id: 'address'\n\t\t\tmyRoutes = new Trocha _clone myRoutesParams\n\t\t\tdescribe 'path() diferent params', ->\n\t\t\t\tit 'no params', ->\n\t\t\t\t\tassertFunctionError myRoutes.path\n\t\t\t\t\tassert myRoutes.town.path(), '/town/:town_name'\n\t\t\t\t\tassert myRoutes.town.house.path(), '/town/:town_name/house/:address'\n\n\t\t\t\tit 'url', ->\n\t\t\t\t\t# true print domain if alwaysUrl is not set.\n\t\t\t\t\tassert myRoutes.town.path(), '/town/:town_name'\n\t\t\t\t\tassert myRoutes.town.path(url: true), 'https://mydomain.net.co/town/:town_name'\n\t\t\t\t\t# false dnt print domain if alwaysUrl is set.\n\t\t\t\t\t_myRoutesParams = _clone myRoutesParams\n\t\t\t\t\t_myRoutesParams.alwaysUrl = true\n\t\t\t\t\t_myRoutes = new Trocha _myRoutesParams\n\t\t\t\t\tassert _myRoutes.town.path(), 'https://mydomain.net.co/town/:town_name'\n\t\t\t\t\tassert _myRoutes.town.path(url: false), '/town/:town_name'\n\n\t\t\t\tit 'pre', ->\n\t\t\t\t\t# true print prefix.\n\t\t\t\t\tassert myRoutes.town.path(), '/town/:town_name'\n\t\t\t\t\tassert myRoutes.town.path(pre: true), '/templates/town/:town_name'\n\n\t\t\t\tit 'post', ->\n\t\t\t\t\t# <Boolean> if post: true print the postfix, if post: false(note just false not undefined nor null nor 0) will ignore alwaysPost route param.\n\t\t\t\t\tassert myRoutes.town.path(), '/town/:town_name'\n\t\t\t\t\tassert myRoutes.town.path(post: true), '/town/:town_name-myH45H.html'\n\t\t\t\t\t_myRoutesParams = _clone myRoutesParams\n\t\t\t\t\t_myRoutesParams.alwaysPost = true\n\t\t\t\t\t_myRoutes = new Trocha _myRoutesParams\n\t\t\t\t\tassert _myRoutes.town.path(), '/town/:town_name-myH45H.html'\n\t\t\t\t\tassert _myRoutes.town.path(post: false), '/town/:town_name'\n\n\t\t\t\tit 'ext', ->\n\t\t\t\t\t# true (extended) print prefix and postfix.\n\t\t\t\t\tassert myRoutes.town.path(), '/town/:town_name'\n\t\t\t\t\tassert myRoutes.town.path(ext: true), '/templates/town/:town_name-myH45H.html'\n\n\t\t\t\tit 'hide', ->\n\t\t\t\t\t# true Hide the last name of the path, if an id is setted it will appears anyway.\n\t\t\t\t\tassert myRoutes.town.path(hide: true), '/:town_name'\n\t\t\t\t\t_myRoutesParams = _clone myRoutesParams\n\t\t\t\t\t_myRoutesParams.routes.town.$hide = true\n\t\t\t\t\t_myRoutes = new Trocha _myRoutesParams\n\t\t\t\t\tassert _myRoutes.town.path(), '/:town_name'\n\n\t\t\t\tit 'parentId', ->\n\t\t\t\t\t# false Hide the parent route id.\n\t\t\t\t\tassert myRoutes.town.house.path(parentId: false), '/town/house/:address'\n\n\t\t\t\tit 'id: false', ->\n\t\t\t\t\t# false Hide the route id.\n\t\t\t\t\tassert myRoutes.town.path(id: false), '/town'\n\t\t\t\t\tassert myRoutes.town.house.path(id: false), '/town/:town_name/house'\n\n\t\t\t\tit '<someId>', ->\n\t\t\t\t\t# <someId>: String set the value of some id of the route.\n\t\t\t\t\tassert myRoutes.town.path(town_name: ''), '/town/'\n\t\t\t\t\tassert myRoutes.town.path(town_name: 'Engativá'), '/town/Engativá'\n\t\t\t\t\tassert myRoutes.town.house.path(address: 'calle_falsa'), '/town/:town_name/house/calle_falsa'\n\t\t\t\t\tassert myRoutes.town.house.path(address: 'calle_falsa',town_name: false), '/town/house/calle_falsa'\n\n\t\t\t\tit 'query', ->\n\t\t\t\t\t# {<attribute>:<value>} Print a define query ?<attribute>=<value>&....\n\t\t\t\t\tassert myRoutes.town.path( # test trivial case\n\t\t\t\t\t\tquery: description: true\n\t\t\t\t\t), '/town/:town_name?description=true'\n\t\t\t\t\tassert myRoutes.town.path( # test multiple value case\n\t\t\t\t\t\tquery:\n\t\t\t\t\t\t\tdescription: true\n\t\t\t\t\t\t\tpictures: 4\n\t\t\t\t\t), '/town/:town_name?description=true&pictures=4'\n\t\t\t\t\tassert myRoutes.town.path( # test array values case\n\t\t\t\t\t\tquery:\n\t\t\t\t\t\t\tan_array: ['qwe', 'asd', 'zxc']\n\t\t\t\t\t), '/town/:town_name?an_array[]=qwe&an_array[]=asd&an_array[]=zxc'\n\t\t\t\t\tassert myRoutes.town.path( # test array values case\n\t\t\t\t\t\tquery:\n\t\t\t\t\t\t\tan_array: ['qwe', 'asd', 'zxc']\n\t\t\t\t\t\t\tert: 1\n\t\t\t\t\t), '/town/:town_name?an_array[]=qwe&an_array[]=asd&an_array[]=zxc&ert=1'\n\t\t\t\t\tassert myRoutes.town.path( # test posible breaking point\n\t\t\t\t\t\tquery: \"ata?&ck\": \"&#{}?=;:/\\\\ \\t\"\n\t\t\t\t\t), '/town/:town_name?ata%3F%26ck=%26%3F%3D%3B%3A%2F%5C%20%09'\n\n\t\t\t\tit 'fragment', ->\n\t\t\t\t\t# String Print the fragment #<value>.\n\t\t\t\t\tassert myRoutes.town.path( fragment: 'references'), '/town/:town_name#references'\n\n\t\tfunction_path_test = undefined\n\n\tissues_test = ->\n\t\tdescribe 'Solve issues', ->\n\t\t\tit '1: alias routes must provide a path funtion', ->\n\t\t\t\tmyRoutes = new Trocha\n\t\t\t\t\troutes:\n\t\t\t\t\t\thello:\n\t\t\t\t\t\t\t$type: Trocha.ALIAS\n\t\t\t\t\t\t\t$alias: 'hi'\n\t\t\t\t\t\t\tname:\n\t\t\t\t\t\t\t\t$justId: true\n\t\t\t\t\t\t\t\t$id: 'my_name'\n\t\t\t\t\t\t\tmyCountry:\n\t\t\t\t\t\t\t\t$type: Trocha.ALIAS\n\t\t\t\t\t\t\t\t$alias: 'Colombia'\n\t\t\t\t\t\t\t\t$id: 'department'\n\t\t\t\tassert myRoutes.hello.path(), 'hi' # note root alias dnt print the initial/\n\t\t\t\tassert myRoutes.hello.name.path(), 'hi/:my_name'\n\t\t\t\tassert myRoutes.hello.name.path({my_name: 'underworld'}), 'hi/underworld'\n\t\t\t\tassert myRoutes.hello.myCountry.path(), 'hi/Colombia/:department'\n\t\t\t\tassert myRoutes.hello.myCountry.path({department: 'Santander'}), 'hi/Colombia/Santander'\n\n\t\t\t# it '2: Support custom pre & post in path()', ->\n\t\t\t# \ttemplateRoutes = new Trocha\n\t\t\t# \t\tpre: 'templates'\n\t\t\t# \t\tpost: '-myH45H.html'\n\t\t\t# \t\troutes:\n\t\t\t# \t\t\thome: {}\n\t\t\t# \tassert templateRoutes.home.path(ext: true), 'templates/home-myH45H.html'\n\t\t\t# \tassert templateRoutes.home.path(pre: 'gato', post: 'perro', ext: true), 'gato/homeperro'\n\n\t\t\tit '4: customSelector must works with routes attributes', ->\n\t\t\t\tmyRoutes = new Trocha\n\t\t\t\t\tcustomSelector: 'TRCH'\n\t\t\t\t\troutes:\n\t\t\t\t\t\thello:\n\t\t\t\t\t\t\tTRCHid: 'name'\n\t\t\t\t\t\t\tTRCHmethod: Trocha.GET\n\t\t\t\t\t\t\t$id: {}\n\t\t\t\tassert myRoutes.hello.path(name: 'World'), '/hello/World'\n\t\t\t\tassert myRoutes.hello.TRCHid, 'name'\n\t\t\t\tassert myRoutes.hello.$id, {}\n\t\t\t\tassert myRoutes.hello.TRCHmethod, 'GET'\n\t\t\t\tassert myRoutes.hello.$id.path(), '/hello/:name/$id'\n\t\tissues_test = undefined\n\t\n\t\n\tdescribe 'Trocha JS Routes List engine', ->\n\t\tconstants_test()\n\t\tconstructor_test()\n\t\tbase_variables()\n\t\troutes_creation_test()\n\t\troute_types_test()\n\t\tfunction_path_test()\n\t\tissues_test()\n\ttest.run()\n)()\n"
  ]
}